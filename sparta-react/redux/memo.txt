리덕스에 대한 내용을 배워봅시다 
추가로 라우터까지 배워보고 이걸 토대로 실습까지 해서 내가 만든 todo-list까지 만들어봅시다 

리덕스를 사용하는 이유
전역상태관리 라이브러리로써 useContext보다 전역상티 관리에 특화되어있는 기능이 있기때문

1) 카운터 프로그램을 만들어보자 

redux : 리덕스 관련 코드를 모두 몰아넣고
config : 리덕스 설정 관련 파일 전부
store : 중앙 state 관리소
modules : state의 그룹 TodoList, todos.js


selector를 이용해서 값을 불러올 때 주의할 점
1. useSelector에 {} 씌우기
2. useSelector 안에는 콜백함수가 들어간다는 것을 기억하기


 2) 스토에어 접근해서 값을 바꾸어보자

 궁금증 : 이거 왜 뭐 수정할 때 갑자기 3000개씩 커밋하려하고 하는지 궁금함 레포지토리를 파일을 넣고 그안에서 실행하는 모습을 보이니깐 이러느느데
 이게 정상인가??? 어디를 수정할때 이렇게 되는지 관찰해봅시다.
counter는 아님

3) counter 를 완성해보자 

4) Docks pattern


가장중요한 react-router-dom을 배워보자 이거배우려고 시간끈거임
라우터라는 단어에 집중해서 보자

메인페이지에서 버튼을 눌렀을 때 main.com/deatail/1~3 이런식으로 뒤에있는 번호로 나누어서 연결해주는 방식(라우팅기법)
이것을 리액트에서 자연스럽게 연결해주는 패키지가 리액트 라우트 돔임

1. 페이지 컴포넌트를 만들것이다 => 다중페이지로 만들기 위해서
2. Router.js 파일 생성 및 router를 구성하는 설정 코드 작성 (redux 할때도 설정파일을 만들었듯이 똑같이 한다)
3. App.jsx 에 import 하고 적용
4. 페이지 이동 테스트 

localhost:3000/home
localhost:3000/about
localhost:3000/contact
/ 뒤에 적힌 놈들을 라우트라고 한다.


필수적으로 알아야하는 Hooks 
useNavigate
길을 안내하다 항해하다는 의미
Apage의 버튼을 눌렀을때 Bpage로 이동이 될 수 있게 해주는 자식이고 <a> 와 굉장히 유사하게 작동을 한다 
다만 깜빡임이나 실제 페이지 이동이 있는 부분은 아닐거라고 생각이 된다.

useNavigate를 통해서 굉장히 많은 활용도를 보인다

useLocation 해서 콘솔을 찍어보면 현재 페이지의 정보가 뜨는데 나중에 이런것을 활용해서 조건부 랜더링할 때 쓴다고 한다

Link 훅은 아니지만 꼭 알아야하는 API 
html 의 <a>를 대체하는 기능이다 (JSX문법에서) 하지만 새로고침이 없는 <a>라고 보면 된다 초기화되면 안되니깐!!!
useNavigate 대신에 한번 써보자 tag처럼 생겼다
<Link></Link>안에 children 값으로 넣으면 된다 
링크태그를 이용할떄는 to라는 속성값을 꼭 입력해줘야한다
예시 : <Link to="contact"> conatact 로 이동</Link>

useParams 를 알아보자
현재 라우팅 페이지로 넘어온 파라미터들의 정보를 알 수 있다.

children의 용도를 알아보자 
props를 전달하는 또하나의 방식 중 하나이다 children : value 이런식으로 전달이 된다 (태그 사이에 쓴다면)

레이아웃을 전체를 감싸게 하고 children으로 변하는 main부분을 주면 된다
리액트라우트돔을 썼을때 이런 children을 이용할 것이기 때문이다
브라우저라우터 밑에 레이아웃을 넣는다면 레이아웃이 칠드런으로 나머지 라우터들을 가지고있는구조가 나온다
그렇다면 레이아웃이 칠드런이 무엇이 들어오냐에 따라서 내부의 것을 실행한다.
공통네비게이터 풋터를 사용할때 이런식으로 사용하면 좋다


다이나믹페이지를 공부해보자
중요한건 Router.js 부분을 수정한 것이랑 하위페이지를 생성해서 연결하는 방식을 기억하자

비동기프로그래밍
동기적방식 현재실행중인 것이 끝나야 다음코드가 실행되는 방식
비동기적방식 실행중인 코드의 완료와 무관하게 즉시 다음코드로 넘어가는 방식 setTimeout addEventListener 서버통신 등등

promise객체의 3가지 상태
pending 정보를 요청한 직후를 나타낸다 (resolve reject 판단 내리기 전)
fullfilled 성공적으로 전달을 완료함
reject 정보 전달 못받음

핸들링이 중요한 이유 우리사이트는 문제가 없지만 주는 서버에 문제가 있는경우 사용자에게 알려줘야하기때문
then catch && async await



